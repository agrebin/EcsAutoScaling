Deploy Demo App on AMAZON ECS
=============================


Description
-----------

This is an example of how to build an autoscaling infrastructure on AWS from scatch using ansible, and is intended to be used as a 
Demo on how to quickly create infrastructure as code on the cloud.
It uses Amazon ECS (Elasti Container Service) which is an implementation of Kubernetes.
I am including a simple python application which serves a minimal http server and it's Dockerfile.

This demo will:

**Basic Infra**
- Create a new VPC
  - Create Subnets on two different availability zones of the region
  - Create Security groups to allow ssh from a bastion host, allow web access from the internet and only from internal subnets.

**Auto Scaling**
- Create an AutoScaling Group, a Launch Configuration and an AutoScaling policy for use by ECS

**Load Balancing**
- Create and link an ELB serrvice for Load Balancing on the Cluster

**DNS**
- Create a Route 53 zone and register the ELB on it

**Container Scheduler service**
- Create an ECS cluster
  - Create an ECS task definition for running our Container
  - Create a Service to access our containers
 


Compatibity
-----------

It has been tested using python 2.7, and Ansible 4.4.3 (previous verions are known to have prolbems with some aws modules)

Requirements
------------
- A working AWS account, it's access keys and ssh keys.
- Python and Ansible
- boto, boto3 and awscli

```
pip install ansible==4.4.3
pip install boto boto3 awscli

aws configure
````

Please enter also your credentials and zone on **aws configure** step.

** Create an IAM role for givin acess ECS to the compute instances
You will need to create ecsInstance Role from AWS IAM Console
* Create Rolename: ecsInstanceRole
* Apply the following AWS policy to the role: AmazonEC2ContainerServiceforEC2Role.


Installation
----------

You will need to export your AWS keys as follows:

```
export AWS_ACCESS_KEY="your access key"
export AWS_SECRETE_KEY="your secretet key"
export AWS_REGION="the region you intend to deploy to" # Make a note that not all regions support ECS
```

Then you will run the shellscript **deploy-cluster.sh** and pass following parameters:
- Domain name for route53
- Name of SSH credentials to link to the EC2 instances


**Example**
```
./deploy-cluster.sh domain.local MySShKey
```

**Edit deploy.yml and make some customizations***
**MANDATORY
- Edit my_vpc_region and set yours
- Edit ssh_key_name and put yours 

**Example
```
  vars:
      my_vpc_name: "PrototypingExceriseCluster"
      my_vpc_region: "us-east-2"
      my_vpc_cidr: "172.56.0.0/16"
      everywhere_cidr: "0.0.0.0/0"
      ssh_key_name: "SSHKEYNAME"
```



LICENSE
-------
This is based on Daniel Roades work: see (https://github.com/daniel-rhoades) 
This package is distributed under MIT License.

