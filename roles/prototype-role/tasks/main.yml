# Check pre-requisites
- include: pre-requisites.yml

# Commissioning block
- block:

  # ECS Task Definition which holds the logical combination of Nginx as a reverse proxy to the Greeter service
  - name: "Prototype deploy | Describe the application as an ECS Task Definition"
    ecs_taskdefinition:
      state: "{{ ecs_task_definition_state }}"
      family: "{{ ecs_task_definition_family }}"
      containers:
        # Prototype  Server
        - name: "{{ prototype_container_name }}"
          cpu: "{{ prototypeservice_cpu }}"
          essential: true
          image: "{{ prototype_image }}"
          memory: "{{ prototypeservice_memory }}"
          logConfiguration:
            logDriver: "syslog"
            options:
              tag: "prototypeservice"
          ulimits:
            - name: "nofile"
              softLimit: 65536
              hardLimit: 65536
          portMappings:
            - containerPort: 9090
              hostPort: 9090
    register: ecs_taskdefinition_output

  - debug: var=ecs_taskdefinition_output verbosity=4

  # ECS Service which runs the Task Definition on the ECS cluster
  - name: "Prototype deploy | Provision an ECS Service using the previous ECS Task Definition"
    ecs_service:
      state: "{{ ecs_service_state }}"
      name: "{{ ecs_service_name }}"
      cluster: "{{ ecs_cluster_name }}"
      task_definition: "{{ ecs_task_definition_family }}:{{ ecs_taskdefinition_output.taskdefinition.revision }}"
      desired_count: "{{ ecs_task_definition_count }}"
  #    role: "{{ ecs_iam_role }}"
      load_balancers:
        - loadBalancerName: "{{ elb_name }}"
          containerName: "{{ prototype_container_name }}"
          containerPort: 9090
    register: ecs_service_output

  - debug: var=ecs_service_output verbosity=4

  when: ecs_service_state == "present"

- block:
  - name: "Get ECS service facts"
    ecs_service_facts:
      cluster: "{{ ecs_cluster_name }}"
      service: "{{ ecs_service_name }}"
      details: "true"
    register: ecs_service_facts

  - debug: var=ecs_service_facts verbosity=4

  when: ecs_service_state == "absent"

# Decommissioning block
- block:
  # Update the ECS Service to set desired count to zero
  - name: "Prototype deploy | Scale down the ECS Service to zero"
    ecs_service:
      state: "present"
      name: "{{ ecs_service_name }}"
      task_definition: "{{ ecs_service_facts.ansible_facts.services[0].taskDefinition }}"
      cluster: "{{ ecs_cluster_name }}"
      desired_count: 0

  # Decommission the ECS Service
  - name: "Prototype Deploy | Decommission the ECS Service"
    ecs_service:
      state: "absent"
      name: "{{ ecs_service_name }}"
      cluster: "{{ ecs_cluster_name }}"

  when: ecs_service_state == "absent" and ecs_service_facts.ansible_facts.services[0].status == "ACTIVE"
